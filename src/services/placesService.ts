import {
  AutocompletePrediction,
  AutocompleteRequest,
  PlaceDetails,
  SearchFilters,
  Location
} from '../types/search.types';
import { geocodingService } from './geocodingService';

class PlacesService {
  private static instance: PlacesService;

  private constructor() {}

  static getInstance(): PlacesService {
    if (!PlacesService.instance) {
      PlacesService.instance = new PlacesService();
    }
    return PlacesService.instance;
  }

  async searchPlaces(input: string, location?: Location, filters?: SearchFilters): Promise<AutocompletePrediction[]> {
    const request: AutocompleteRequest = {
      input: input.trim(),
      language: 'es',
      region: 'CO',
    };

    // Add location bias if provided
    if (location) {
      request.location = location;
      request.radius = filters?.radius || 50000; // 50km default
    }

    // Apply filters
    if (filters) {
      if (filters.placeTypes && filters.placeTypes.length > 0) {
        request.types = filters.placeTypes.join('|');
      }

      if (filters.strictBounds && location) {
        request.strictBounds = true;
      }
    }

    try {
      const predictions = await geocodingService.getAutocompletePredictions(request);

      // Apply additional client-side filtering
      return this.filterPredictions(predictions, filters);
    } catch (error) {
      console.error('Places search failed:', error);
      throw error;
    }
  }

  async searchNearbyPlaces(location: Location, radius: number, type?: string): Promise<AutocompletePrediction[]> {
    // Use a generic search term with location bias to find nearby places
    const searchTerms = type ? this.getTypeSearchTerm(type) : 'restaurantes tiendas';

    const request: AutocompleteRequest = {
      input: searchTerms,
      location,
      radius,
      language: 'es',
      region: 'CO',
      types: type ? [type] : undefined,
    };

    try {
      return await geocodingService.getAutocompletePredictions(request);
    } catch (error) {
      console.error('Nearby places search failed:', error);
      return [];
    }
  }

  async getPlaceDetails(placeId: string): Promise<PlaceDetails> {
    try {
      return await geocodingService.getPlaceDetails(
        placeId,
        [
          'place_id',
          'name',
          'formatted_address',
          'geometry',
          'formatted_phone_number',
          'website',
          'rating',
          'user_ratings_total',
          'photos',
          'opening_hours',
          'price_level',
          'types',
          'vicinity',
        ]
      );
    } catch (error) {
      console.error('Get place details failed:', error);
      throw error;
    }
  }

  async searchByAddress(address: string): Promise<AutocompletePrediction[]> {
    const request: AutocompleteRequest = {
      input: address,
      language: 'es',
      region: 'CO',
      types: ['address'],
    };

    try {
      return await geocodingService.getAutocompletePredictions(request);
    } catch (error) {
      console.error('Address search failed:', error);
      throw error;
    }
  }

  async searchByType(type: string, location?: Location): Promise<AutocompletePrediction[]> {
    const searchTerm = this.getTypeSearchTerm(type);

    const request: AutocompleteRequest = {
      input: searchTerm,
      language: 'es',
      region: 'CO',
      types: type === 'address' ? ['address'] : [type],
      location,
      radius: location ? 50000 : undefined,
    };

    try {
      return await geocodingService.getAutocompletePredictions(request);
    } catch (error) {
      console.error('Type search failed:', error);
      throw error;
    }
  }

  private filterPredictions(predictions: AutocompletePrediction[], filters?: SearchFilters): AutocompletePrediction[] {
    if (!filters) return predictions;

    return predictions.filter(prediction => {
      // Filter by place types if specified
      if (filters.placeTypes && filters.placeTypes.length > 0) {
        const hasMatchingType = prediction.types.some(type =>
          filters.placeTypes!.includes(type)
        );
        if (!hasMatchingType) return false;
      }

      // Additional filtering can be added here
      // Note: Some filters like rating, price level, and open_now require place details
      // These would need to be fetched individually, which can be expensive

      return true;
    });
  }

  private getTypeSearchTerm(type: string): string {
    const typeSearchTerms: Record<string, string> = {
      'restaurant': 'restaurantes',
      'food': 'restaurantes comida',
      'lodging': 'hoteles hospedaje',
      'tourist_attraction': 'atracciones tur√≠sticas',
      'museum': 'museos',
      'park': 'parques',
      'shopping_mall': 'centros comerciales',
      'store': 'tiendas',
      'gas_station': 'gasolineras',
      'bank': 'bancos',
      'atm': 'cajeros autom√°ticos',
      'pharmacy': 'farmacias',
      'hospital': 'hospitales',
      'doctor': 'm√©dicos',
      'police': 'estaci√≥n de polic√≠a',
      'fire_station': 'estaci√≥n de bomberos',
      'school': 'colegios escuelas',
      'university': 'universidades',
      'library': 'bibliotecas',
      'post_office': 'oficinas de correo',
      'church': 'iglesias',
      'gym': 'gimnasios',
      'movie_theater': 'cines teatros',
      'night_club': 'discotecas bares',
      'bus_station': 'estaciones de bus',
      'subway_station': 'estaciones de metro',
      'train_station': 'estaciones de tren',
      'airport': 'aeropuertos',
      'parking': 'parqueaderos',
      'car_rental': 'alquiler de carros',
      'travel_agency': 'agencias de viajes',
      'accounting': 'contabilidad',
      'lawyer': 'abogados',
      'real_estate_agency': 'inmobiliarias',
      'hardware_store': 'ferreter√≠as',
      'electronics_store': 'tiendas de electr√≥nica',
      'clothing_store': 'tiendas de ropa',
      'supermarket': 'supermercados',
      'bakery': 'panader√≠as',
      'cafe': 'caf√©s',
      'bar': 'bares',
      'beauty_salon': 'salones de belleza',
      'hair_care': 'peluquer√≠as',
      'dentist': 'dentistas',
      'veterinary_care': 'veterinarias',
      'pet_store': 'tiendas de mascotas',
    };

    return typeSearchTerms[type] || type;
  }

  // Get popular place types for the region (Colombia)
  getPopularPlaceTypes(): Array<{ id: string; name: string; icon: string }> {
    return [
      { id: 'restaurant', name: 'Restaurantes', icon: 'üçΩÔ∏è' },
      { id: 'lodging', name: 'Hoteles', icon: 'üè®' },
      { id: 'gas_station', name: 'Gasolineras', icon: '‚õΩ' },
      { id: 'bank', name: 'Bancos', icon: 'üè¶' },
      { id: 'pharmacy', name: 'Farmacias', icon: 'üíä' },
      { id: 'hospital', name: 'Hospitales', icon: 'üè•' },
      { id: 'school', name: 'Colegios', icon: 'üè´' },
      { id: 'park', name: 'Parques', icon: 'üå≥' },
      { id: 'shopping_mall', name: 'Centros Comerciales', icon: 'üõçÔ∏è' },
      { id: 'supermarket', name: 'Supermercados', icon: 'üõí' },
      { id: 'atm', name: 'Cajeros', icon: 'üí≥' },
      { id: 'parking', name: 'Parqueaderos', icon: 'üÖøÔ∏è' },
      { id: 'movie_theater', name: 'Cines', icon: 'üé¨' },
      { id: 'museum', name: 'Museos', icon: 'üèõÔ∏è' },
      { id: 'church', name: 'Iglesias', icon: '‚õ™' },
      { id: 'bus_station', name: 'Estaciones de Bus', icon: 'üöå' },
      { id: 'subway_station', name: 'Estaciones de Metro', icon: 'üöá' },
      { id: 'gym', name: 'Gimnasios', icon: 'üí™' },
      { id: 'cafe', name: 'Caf√©s', icon: '‚òï' },
      { id: 'bakery', name: 'Panader√≠as', icon: 'ü•ñ' },
    ];
  }

  // Get suggested search terms based on current location or popular searches
  getSuggestedSearches(location?: Location): string[] {
    if (location && this.isInMedellin(location)) {
      return [
        'Parque Envigado',
        'Plaza Mayor Medell√≠n',
        'Metrocable Medell√≠n',
        'Poblado Medell√≠n',
        'Centro Comercial Oviedo',
        'Parque Lleras',
        'Estadio Atanasio Girardot',
        'Jard√≠n Bot√°nico Medell√≠n',
        'Museo de Antioquia',
        'Comuna 13 Medell√≠n',
        'Terminal del Sur Medell√≠n',
        'Aeropuerto Olaya Herrera',
        'Unidad Deportiva Bel√©n',
        'Centro Comercial Santaf√©',
      ];
    }

    return [
      'restaurantes cerca',
      'hoteles',
      'gasolineras',
      'hospitales',
      'parques',
      'centros comerciales',
      'farmacias',
      'colegios',
      'cajeros autom√°ticos',
      'panader√≠as',
      'museos',
      'iglesias',
      'gimnasios',
      'cines',
      'banco',
      'supermercados',
    ];
  }

  private isInMedellin(location: Location): boolean {
    // Approximate bounds for Medell√≠n metropolitan area
    const MED_ELLIN_BOUNDS = {
      north: 6.35,
      south: 6.10,
      east: -75.45,
      west: -75.65,
    };

    return (
      location.lat >= MED_ELLIN_BOUNDS.south &&
      location.lat <= MED_ELLIN_BOUNDS.north &&
      location.lng >= MED_ELLIN_BOUNDS.west &&
      location.lng <= MED_ELLIN_BOUNDS.east
    );
  }

  // Get search suggestions based on partial input
  async getSearchSuggestions(input: string, location?: Location): Promise<string[]> {
    const suggestions: string[] = [];
    const lowerInput = input.toLowerCase();

    // Get suggested searches that match the input
    const suggestedSearches = this.getSuggestedSearches(location);
    suggestions.push(...suggestedSearches.filter(search =>
      search.toLowerCase().includes(lowerInput)
    ));

    // Get place type suggestions
    const placeTypes = this.getPopularPlaceTypes();
    suggestions.push(...placeTypes
      .filter(type => type.name.toLowerCase().includes(lowerInput))
      .map(type => type.name)
    );

    // Get actual autocomplete suggestions if input is long enough
    if (input.length >= 3) {
      try {
        const predictions = await this.searchPlaces(input, location);
        suggestions.push(...predictions.slice(0, 5).map(p => p.description));
      } catch (error) {
        // Silently fail for suggestions
      }
    }

    // Remove duplicates and limit to 10 suggestions
    return [...new Set(suggestions)].slice(0, 10);
  }

  // Format place details for display
  formatPlaceDetails(details: PlaceDetails): string {
    let formatted = `${details.name}\n${details.address}`;

    if (details.phoneNumber) {
      formatted += `\nüìû ${details.phoneNumber}`;
    }

    if (details.rating) {
      const stars = '‚≠ê'.repeat(Math.round(details.rating));
      formatted += `\n${stars} ${details.rating} (${details.userRatingsTotal} rese√±as)`;
    }

    if (details.openingHours?.openNow !== undefined) {
      formatted += `\n${details.openingHours.openNow ? 'üü¢ Abierto ahora' : 'üî¥ Cerrado'}`;
    }

    if (details.priceLevel) {
      const priceSymbols = '$'.repeat(details.priceLevel);
      formatted += `\n${priceSymbols}`;
    }

    return formatted;
  }

  // Calculate distance between two points (in kilometers)
  calculateDistance(from: Location, to: Location): number {
    const R = 6371; // Earth's radius in kilometers
    const dLat = this.toRadians(to.lat - from.lat);
    const dLng = this.toRadians(to.lng - from.lng);

    const a =
      Math.sin(dLat / 2) * Math.sin(dLat / 2) +
      Math.cos(this.toRadians(from.lat)) *
      Math.cos(this.toRadians(to.lat)) *
      Math.sin(dLng / 2) * Math.sin(dLng / 2);

    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    return R * c;
  }

  private toRadians(degrees: number): number {
    return degrees * (Math.PI / 180);
  }
}

export const placesService = PlacesService.getInstance();